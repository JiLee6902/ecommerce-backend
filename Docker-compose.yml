version: '3.8'

networks:
  shopdev_network:
    driver: bridge

services:
  nodejs-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nodejs_app
    networks:
      - shopdev_network
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/shopDEV?authSource=admin&connectTimeoutMS=30000&serverSelectionTimeoutMS=30000
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - RABBITMQ_URI=amqp://guest:12345@rabbitmq:5672
      - REDIS_CACHE_HOST=redis
      - IOREDIS_IS_ENABLED=true
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  mongodb:
    image: mongo:5.0
    container_name: shopdev_mongodb
    networks:
      - shopdev_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27018:27017"
    volumes:
      - mongodata:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: shopdev_es
    networks:
      - shopdev_network
    environment:
      - node.name=shopdev_es
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "xpack.security.enabled=false"
      - "xpack.monitoring.enabled=false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200 >/dev/null || exit 1"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 512M
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: shopdev_kibana
    networks:
      - shopdev_network
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5601" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: shopdev_rabbitmq
    networks:
      - shopdev_network
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=12345
    healthcheck:
      test:
        [
          "CMD",
          "rabbitmq-diagnostics",
          "check_port_connectivity"
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: shopdev_redis
    networks:
      - shopdev_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_HOST=redis
      - IOREDIS_HOST=redis
      - IOREDIS_PORT=6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    deploy:
      resources:
        limits:
          memory: 256M
    restart: unless-stopped

volumes:
  mongodata:
    driver: local
  esdata:
    driver: local
  redisdata:
    driver: local
  rabbitmqdata:
    driver: local
